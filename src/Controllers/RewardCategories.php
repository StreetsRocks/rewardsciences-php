<?php
/*
 * RewardSciencesAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ) on 09/13/2016
 */

namespace RewardSciencesAPILib\Controllers;

use RewardSciencesAPILib\APIException;
use RewardSciencesAPILib\APIHelper;
use RewardSciencesAPILib\Configuration;
use RewardSciencesAPILib\Models;
use RewardSciencesAPILib\Exceptions;
use RewardSciencesAPILib\Http\HttpRequest;
use RewardSciencesAPILib\Http\HttpResponse;
use RewardSciencesAPILib\Http\HttpMethod;
use RewardSciencesAPILib\Http\HttpContext;
use Unirest\Request;

/**
 * @todo Add a general description for this controller.
 */
class RewardCategories extends BaseController {

    /**
     * @var RewardCategories The reference to *Singleton* instance of this class
     */
    private static $instance;
    
    /**
     * Returns the *Singleton* instance of this class.
     * @return RewardCategories The *Singleton* instance.
     */
    public static function getInstance()
    {
        if (null === static::$instance) {
            static::$instance = new static();
        }
        
        return static::$instance;
    }

    /**
     * List all the available reward categories.
     * @param  integer     $limit      Optional parameter: The number of reward categories you want to be retrieved.
     * @param  integer     $offset     Optional parameter: The number of reward categories you want to skip before starting the retrieval.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function mlist (
                $limit = 25,
                $offset = 0) 
    {
        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/reward_categories';

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'limit'  => (null != $limit) ? $limit : 25,
            'offset' => (null != $offset) ? $offset : 0,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept' => Configuration::$accept,
            'Content-Type' => Configuration::$contentType,
            'Authorization' => sprintf('Bearer %1$s', Configuration::$oAuthAccessToken)
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);            
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        //call on-after Http callback
        if($this->getHttpCallBack() != null) {
            $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
            $_httpContext = new HttpContext($_httpRequest, $_httpResponse);
            
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);            
        }

        //Error handling using HTTP status codes
        if (($response->code < 200) || ($response->code > 208)) { //[200,208] = HTTP OK
            throw new APIException("HTTP Response Not OK", $_httpContext);
        }

        return $response->body;
    }
        

}