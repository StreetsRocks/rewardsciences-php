<?php
/*
 * RewardSciencesAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ) on 09/13/2016
 */

namespace RewardSciencesAPILib\Controllers;

use RewardSciencesAPILib\APIException;
use RewardSciencesAPILib\APIHelper;
use RewardSciencesAPILib\Configuration;
use RewardSciencesAPILib\Models;
use RewardSciencesAPILib\Exceptions;
use RewardSciencesAPILib\Http\HttpRequest;
use RewardSciencesAPILib\Http\HttpResponse;
use RewardSciencesAPILib\Http\HttpMethod;
use RewardSciencesAPILib\Http\HttpContext;
use Unirest\Request;

/**
 * @todo Add a general description for this controller.
 */
class Users extends BaseController {

    /**
     * @var Users The reference to *Singleton* instance of this class
     */
    private static $instance;
    
    /**
     * Returns the *Singleton* instance of this class.
     * @return Users The *Singleton* instance.
     */
    public static function getInstance()
    {
        if (null === static::$instance) {
            static::$instance = new static();
        }
        
        return static::$instance;
    }

    /**
     * This endpoint lets retrieve a user's details.
     * @param  integer     $userId      Required parameter: The ID of the user to be retrieved.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function show (
                $userId) 
    { 
        //check that all required arguments are provided
        if(!isset($userId))
            throw new \InvalidArgumentException("One or more required arguments were NULL.");


        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/users/{user_id}';

        //process optional query parameters
        APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'user_id' => $userId,
            ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept' => Configuration::$accept,
            'Content-Type' => Configuration::$contentType,
            'Authorization' => sprintf('Bearer %1$s', Configuration::$oAuthAccessToken)
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);            
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        //call on-after Http callback
        if($this->getHttpCallBack() != null) {
            $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
            $_httpContext = new HttpContext($_httpRequest, $_httpResponse);
            
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);            
        }

        //Error handling using HTTP status codes
        if (($response->code < 200) || ($response->code > 208)) { //[200,208] = HTTP OK
            throw new APIException("HTTP Response Not OK", $_httpContext);
        }

        return $response->body;
    }
        
    /**
     * This endpoint lets you tie a user with his/her activities. Youâ€™ll want to identify a user with any relevant information as soon as they log-in or sign-up.
     * @param  string     $email          Required parameter: The user's email address
     * @param  string     $firstName      Optional parameter: The user's first name
     * @param  string     $lastName       Optional parameter: The user's last name
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function identify (
                $email,
                $firstName = NULL,
                $lastName = NULL) 
    { 
        //check that all required arguments are provided
        if(!isset($email))
            throw new \InvalidArgumentException("One or more required arguments were NULL.");


        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/users';

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'email'      => $email,
            'first_name' => $firstName,
            'last_name'  => $lastName,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept' => Configuration::$accept,
            'Content-Type' => Configuration::$contentType,
            'Authorization' => sprintf('Bearer %1$s', Configuration::$oAuthAccessToken)
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl);
        if($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);            
        }

        //and invoke the API call request to fetch the response
        $response = Request::post($_queryUrl, $_headers);

        //call on-after Http callback
        if($this->getHttpCallBack() != null) {
            $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
            $_httpContext = new HttpContext($_httpRequest, $_httpResponse);
            
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);            
        }

        //Error handling using HTTP status codes
        if (($response->code < 200) || ($response->code > 208)) { //[200,208] = HTTP OK
            throw new APIException("HTTP Response Not OK", $_httpContext);
        }

        return $response->body;
    }
        

}